#include "HX711.h"                    // Biblioteca HX711 
#define DOUT  A0                      // HX711 DATA OUT = pino A0 do Arduino 
#define CLK  A1                       // HX711 SCK IN = pino A1 do Arduino 
 
HX711 balanca;          // define instancia balança HX711
 
float calibration_factor = 42130;     // fator de calibração para teste inicial

#include <SD.h>
#include <SPI.h>
#include <Ethernet.h>
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 1, 199); 
EthernetServer server(80);
File webFile;     

void setup() 
{  
  Serial.begin(9600);            // monitor serial 9600 Bps
  balanca.begin(DOUT, CLK);      // inicializa a balança
  Serial.println();              // salta uma linha
  Serial.println("HX711 - Calibracao da Balança");                 // imprime no monitor serial
  Serial.println("Remova o peso da balanca");
  Serial.println("Depois que as leituras começarem, coloque um peso conhecido sobre a Balança");
  Serial.println("Pressione a,s,d,f para aumentar Fator de Calibração por 10,100,1000,10000 respectivamente");
  Serial.println("Pressione z,x,c,v para diminuir Fator de Calibração por 10,100,1000,10000 respectivamente");
  Serial.println("Após leitura correta do peso, pressione t para TARA(zerar) ");
 
  balanca.set_scale();                                             // configura a escala da Balança
  zeraBalanca ();                                                  // zera a Balança
  }
 
void zeraBalanca ()
{

  Serial.println();                                               // salta uma linha
  balanca.tare();                                                 // zera a Balança
  Serial.println("Balança Zerada ");

pinMode(5,INPUT);
     
    Ethernet.begin(mac, ip);  
    server.begin(); 

// initialize SD card
Serial.println("Initializing SD card...");
if (!SD.begin(4)) {
    Serial.println("ERROR - SD card initialization failed!");
    return;
}

Serial.println("SUCCESS - SD card initialized.");
// check for index.htm file
if (!SD.exists("index.htm")) {
    Serial.println("ERROR - Can't find index.htm file!");
    return;  // can't find index file
}
Serial.println("SUCCESS - Found index.htm file.");
          
} 
void loop() {

balanca.set_scale(calibration_factor);                     // ajusta fator de calibração
  Serial.print("Peso: ");                                    // imprime no monitor serial
  Serial.print(balanca.get_units(), 3);                      // imprime peso da balança com 3 casas decimais
  Serial.print("kg");
  Serial.print("Fator de Calibração:");               // imprime no monitor serial
  Serial.println(calibration_factor);                        // imprime fator de calibração
  delay(500) ;                                               // atraso de 0,5 segundo
 
  if (Serial.available())                                    // reconhece letra para ajuste do fator de calibração
  {
    char temp = Serial.read();
    if (temp == '+' || temp == 'a')                // a = aumenta 10
      calibration_factor += 10;
    else if (temp == '-' || temp == 'z')           // z = diminui 10
      calibration_factor -= 10;
    else if (temp == 's')                          // s = aumenta 100
      calibration_factor += 100;
    else if (temp == 'x')                          // x = diminui 100
      calibration_factor -= 100;
    else if (temp == 'd')                          // d = aumenta 1000
      calibration_factor += 1000;
    else if (temp == 'c')                          // c = diminui 1000
      calibration_factor -= 1000;
    else if (temp == 'f')                          // f = aumenta 10000
      calibration_factor += 10000;
    else if (temp == 'v')                          // v = dimuni 10000
      calibration_factor -= 10000;
    else if (temp == 't') zeraBalanca ();          // t = zera a Balança
  }
  
    EthernetClient client = server.available();  
    if (client) 
    {    
        boolean currentLineIsBlank = true;
        while (client.connected()) 
        {
            if (client.available()) 
            {   
                char c = client.read(); 
                
                if (c == '\n' && currentLineIsBlank) {
                  
                    client.println("HTTP/1.1 200 OK");
                    client.println("Content-Type: text/html");
                    client.println("Connection: close");
                    client.println("Refresh: 1");
                    client.println(); 
                    
                    client.println("<!DOCTYPE html>");
                    client.println("<html>");
                    client.println("<head>");
                    
                    client.println("<body>");

                    webFile = SD.open("index.htm");        // open web page file
                    if (webFile) {
                    while(webFile.available()) {
                        client.write(webFile.read()); // send web page to client
                    }
                    webFile.close();
                }
                               
                    client.println("<hr/>");
                    client.println("<center><h2>PRATELEIRA - PACOTES</h2>");
                    porta_analogica(client);
                    client.println("<hr/>");                                          
                    client.println("<center><h2>PRATELEIRA - LATAS, GARRAFAS, VIDROS</h2>");
                    porta_digital(client); 
                    client.println("</body>");
                    client.println("</html>");
                    break;
                }
                
                if (c == '\n') 
                {    
                    currentLineIsBlank = true;
                } 
                else if (c != '\r') 
                {
                    currentLineIsBlank = false;
                }
            } 
        } 
        
        delay(1);      
        client.stop(); 
        
    } 
} 
void porta_analogica(EthernetClient client_aux)
{
  client_aux.print("<font color=white>STATUS:</font>");
  float valor = analogRead(A0);
  float peso = (balanca.get_units());
  if(peso >=1)
{
      client_aux.println("<font color=grean>");
      client_aux.println("<br/>");
      client_aux.println(peso);
      client_aux.println("Kg <h1>CHEIO</h1><h1>* PRATELEIRA - OK *</h1>");
      client_aux.println("</font>");
      
  }
  else
  {
      client_aux.println("<font color=red>");
      client_aux.println("<br/>");
      client_aux.println(peso);
      client_aux.println("Kg <h1>VAZIO</h1><h1>* ABASTECER *</h1>");
      client_aux.println("</font>");
      
  }
}
void porta_digital(EthernetClient client_aux)
{
  client_aux.print("<font color=white>STATUS:</font>");
  bool valor = digitalRead(5);
  if(valor == HIGH)
  {
      client_aux.println("<font color=red>");
      client_aux.println("<br/>");
      client_aux.println(valor == 0);
      client_aux.println(F("<font color=red> <h1>VAZIO</h1><h1>* ABASTECER *</h1></font>"));            
  }   
  else
  {   
      client_aux.println("<font color=grean>");
      client_aux.println("<br/>");
      client_aux.println(valor == 0); 
      client_aux.println(F("<font color=grean> <h1>CHEIO</h1><h1>* PRATELEIRA - OK *</h1></font>"));      
  }
}